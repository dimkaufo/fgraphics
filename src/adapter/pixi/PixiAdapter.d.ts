import {Point} from "fcore/src/index";
import {PixiTickerWrapper} from "./wrapper/ticker/PixiTickerWrapper";
import {IEngineAdapter, IObjectUnderPointVO} from "../abstract/IEngineAdapter";
import {EngineAdapter} from "../abstract/EngineAdapter";
import {IDisplayObjectContainerWrapper} from "../abstract/wrapper/display/IDisplayObjectContainerWrapper";
import {ITickerWrapper} from "../abstract/wrapper/ticker/ITickerWrapper";
import {IDisplayObjectWrapper} from "../abstract/wrapper/display/IDisplayObjectWrapper";
import {ITextWrapper} from "../abstract/wrapper/display/ITextWrapper";
import {IMovieClipWrapper} from "../abstract/wrapper/display/IDisplayMovieClipWrapper";
import {ISpriteWrapper} from "../abstract/wrapper/display/ISpriteWrapper";
import {IAnimatableSpriteWrapper} from "../abstract/wrapper/display/IAnimatableSpriteWrapper";
import {PixiDisplayObjectContainerWrapper} from "./wrapper/display/PixiDisplayObjectContainerWrapper";
import {IGraphicsWrapper} from "../abstract/wrapper/display/IGraphicsWrapper";
import {DisplayObjectWithNameVO} from "../../tools/display/DisplayObjectWithNameVO";
export declare class PixiAdapter extends EngineAdapter implements IEngineAdapter {
    protected renderer: PIXI.SystemRenderer;
    protected _stage: PixiDisplayObjectContainerWrapper;
    protected tickerWrapper: PixiTickerWrapper;
    protected rendererSize: Point;
    protected canvas: HTMLCanvasElement;
    constructor();
    protected construction(): void;
    customPreparation(canvas: HTMLCanvasElement): void;
    initGraphics(): void;
    stage: IDisplayObjectContainerWrapper;
    renderGraphics(): void;
    changeRenderSize(width: number, height: number): void;
    getRenderSize(): Point;
    mainTicker: ITickerWrapper;
    BaseDisplayObjectClass: any;
    createDisplayWrapperBasedOnObject<WrapperType extends IDisplayObjectWrapper>(object: any): WrapperType;
    createTextWrapper(object?: any): ITextWrapper;
    createMovieClipWrapper(object?: any): IMovieClipWrapper;
    createSpriteWrapper(object?: any): ISpriteWrapper;
    createAnimatableSpriteWrapper(object?: any): IAnimatableSpriteWrapper;
    createDisplayObjectContainerWrapper(object?: any): IDisplayObjectContainerWrapper;
    createPerformanceDisplayObjectContainerWrapper(object?: any): IDisplayObjectContainerWrapper;
    createDisplayObjectWrapper(object?: any): IDisplayObjectWrapper;
    createGraphicsWrapper(object?: any): IGraphicsWrapper;
    globalMouseX: number;
    globalMouseY: number;
    findChildrenByNamePart<ChildType extends IDisplayObjectWrapper>(nativeContainer: any, namePart: string, isRecursive: boolean): DisplayObjectWithNameVO<ChildType>[];
    findChildByName<ChildType extends IDisplayObjectWrapper>(nativeContainer: any, childName: string, isRecursive: boolean): ChildType;
    getNativeObjectsUnderPoint(root: any, x: number, y: number): IObjectUnderPointVO;
}
